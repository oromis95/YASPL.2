package compiler;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import visitors.*;
import visitors.nodes.*;
import java.util.List;
import java.util.*;
import visitors.lexical.EntryLexem;
import visitors.semantic.*;
import visitors.codeGenerator.CodeVisitor;
import java.io.PrintWriter;
import visitors.syntax.*;


parser code {:
  public Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(this.getClass().getResource("/"+Driver.INPUT).getFile());
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);
:};
scan with {:
   Symbol symbol = lexer.next_token();
   if(symbol.sym == sym.EOF){
    SemanticVisitor.stringTable=lexer.getStringsTable();
   }
   return symbol;
:};

/* Terminals (tokens returned by the scanner). */
terminal String        HEAD, START, SEMI, INT, BOOL, DOUBLE, NAME, COMMA, DEF, LPAR, RPAR, COLON, LGPAR,
                       RGPAR, READ, WRITE, PLUS, MINUS, TIMES, DIV,  ASSIGN, IF, THEN, ELSE, WHILE, DO,
                       GT, GE, LT, LE, EQ, NOT, AND, OR, STRING, UMINUS;

terminal Integer INT_CONST;
terminal Double DOUBLE_CONST;
terminal String STRING_CONST;
terminal Boolean TRUE, FALSE;

/* Non terminals */
non terminal Program Programma;
non terminal VariableDeclaration Var_decl;
non terminal Type Type;
non terminal FunctionDeclaration Def_decl;
non terminal Body Body;
non terminal CompositeStatement Comp_stat;
non terminal Statement Stat, Simple_stat;
non terminal Expression Expr;
non terminal BooleanExpression Bool_expr;
non terminal ArrayList<ParameterDeclaration> Par_decls;
non terminal ArrayList<Decl> Decls;
non terminal ArrayList<Statement> Statements;
non terminal ArrayList<Variable> Vars;
non terminal ArrayList<Type> Types;
non terminal ArrayList<Expression> Out_values;
non terminal ArrayList<Expression> Exprs;
non terminal ArrayList<VariableDeclaration> Var_decls;
non terminal ArrayList<Expression> Func_exprs;
non terminal String Arith_op, Bool_op, Rel_op;

/* Precedences */


precedence left COMMA;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left TIMES, DIV;
precedence left PLUS, MINUS;
precedence right NOT;

/* The grammar rules */


/******************************************Program****************************************************/

Programma ::= HEAD Decls:decls START Statements:stmts{:
                                               RESULT = new Program(decls, stmts);
                                                              SyntaxVisitor visitor = new SyntaxVisitor();
                                                              visitor.appendRoot(visitor.visit(RESULT, null));
                                                              visitor.toXml();
                                                              SemanticVisitor visitor1=new SemanticVisitor(SemanticVisitor.stringTable);
                                                              visitor1.visit(RESULT,null);
                                                              Stack<SymbolTable> stackOfTable=visitor1.getStackOfTable();
                                                              CodeVisitor visitor2=new CodeVisitor(stackOfTable);
                                                              PrintWriter out = new PrintWriter("yaspl.c");
                                                              out.println(visitor2.visit(RESULT,""));
                                                              out.close();


                                          :} ;


/******************************************Decls****************************************************/


Decls ::= Var_decl:var_decl Decls:decls {:decls.add(var_decl); RESULT = decls;:}
		|Def_decl:def_decl Decls:decls {:decls.add(def_decl); RESULT = decls;:}
		|/*epsilon*/ {: RESULT = new ArrayList<>(); :}
		;


/******************************************Statements*************************************************/


Statements ::= Stat:s Statements:stmts {: stmts.add(s); RESULT = stmts ; :}
			|Stat:s {: RESULT = new ArrayList<>(); RESULT.add(s); :}
			;

/******************************************Var_decl****************************************************/


Var_decl ::= Type:type Vars:vars SEMI{: RESULT = new VariableDeclaration(type, vars); :};


/******************************************Type****************************************************/


Type ::= INT {: RESULT = new Type("int"); :}
		|BOOL {: RESULT = new Type("bool"); :}
		|DOUBLE {: RESULT = new Type("double");:}
		|STRING {: RESULT = new Type("string"); :}
		;


/******************************************Vars****************************************************/


Vars ::= NAME:name COMMA Vars:vars {: vars.add(new Variable(new Identifier(name))); RESULT = vars; :}
		|NAME:name {: RESULT = new ArrayList<>(); RESULT.add(new Variable(new Identifier(name))); :}
		;


/******************************************Types****************************************************/


Types ::= Type:type COMMA Types:types {: types.add(type); RESULT = types; :}
		| Type:type {: RESULT = new ArrayList<>(); RESULT.add(type); :}
		;


/******************************************Def_decl****************************************************/


Def_decl ::= DEF NAME:fname LPAR Var_decls:var_decls RPAR COLON Par_decls:par_decls Body:body
            {:
                RESULT = new FunctionDeclaration(new Identifier(fname), var_decls, par_decls, body);
            :};


/******************************************Var_decl****************************************************/


Var_decls ::= Var_decl:vd Var_decls:vds {: vds.add(vd); RESULT = vds; :}
			|/*epsilon*/ {: RESULT = new ArrayList<>(); :}
			;


/******************************************Par_decl****************************************************/


Par_decls ::= Var_decl:vd Par_decls:pd {: pd.add(new ParameterDeclaration(vd)); RESULT = pd; :}
			|Var_decl:vd {: RESULT = new ArrayList<>(); RESULT.add(new ParameterDeclaration(vd)); :}
			;


/******************************************Body****************************************************/


Body ::= LGPAR Var_decls:vds Statements:stmts RGPAR SEMI {: RESULT = new Body(vds, stmts); :};


/******************************************Comp_stat****************************************************/


Comp_stat ::= LGPAR Statements:stmts RGPAR {: RESULT = new CompositeStatement(stmts); :} ;


/******************************************Stat****************************************************/


Stat ::= Comp_stat:cs {: RESULT = cs; :}
		|Simple_stat:ss {: RESULT = ss; :}
		;


/******************************************Simple_stat****************************************************/


Simple_stat ::= Vars:vs READ Types:tps SEMI  {: RESULT = new ReadStatement(vs, tps); :}
			| Out_values:ov WRITE SEMI {: RESULT = new WriteStatement(ov); :}
			| NAME:name ASSIGN Bool_expr:bool_expr SEMI{:RESULT=new AssignStatement(new Identifier(name),bool_expr);:}
			| NAME:name ASSIGN Expr:expr SEMI  {: RESULT = new AssignStatement(new Identifier(name), expr); :}
			| NAME:name LPAR Func_exprs:fe COLON Vars:vs RPAR SEMI
			        {:
                        RESULT = new FunctionCall(new Identifier(name), fe, vs);
                    :}
			| IF LPAR Bool_expr:be RPAR THEN Comp_stat:c1 ELSE Comp_stat:c2 SEMI
		                {:
                            RESULT = new IfThenElseStatement(be, c1, c2);
                        :}
			| IF LPAR Bool_expr:be RPAR THEN Comp_stat:c1 SEMI {: RESULT = new IfThenStatement(be, c1); :}
			| WHILE LPAR Bool_expr:be RPAR DO Comp_stat:c1 SEMI {: RESULT = new WhileStatement(be, c1); :}
			;


/******************************************Out_values****************************************************/


Out_values ::= Expr:expr COMMA Out_values:ov  {: ov.add(expr); RESULT = ov; :}
			| STRING_CONST:sc COMMA Out_values:ov {: ov.add(new StringConst(sc)); RESULT = ov; :}
			| Expr:expr {: RESULT = new ArrayList<>(); RESULT.add(expr); :}
			;


/******************************************Exprs****************************************************/


Exprs ::= Expr:expr COMMA Exprs:exprs {: exprs.add(expr); RESULT = exprs; :}
		|Expr:expr {: RESULT = new ArrayList<>(); RESULT.add(expr); :}
		;


/******************************************Expr****************************************************/


Expr ::= INT_CONST:ic {: RESULT = new IntegerConst(ic); :}
		|DOUBLE_CONST:dc {: RESULT = new DoubleConst(dc); :}
		|STRING_CONST:sc{:RESULT=new StringConst(sc);:}
		|Expr:s1 Arith_op:op Expr:s2 {: RESULT = new BinaryExpression(s1, s2, op); :}
		|NAME:name {: RESULT = new Identifier(name);:}
		|MINUS Expr:expr  {: RESULT = new UminusExpression(expr); :} %prec UMINUS
		|LPAR Expr:expr RPAR {: RESULT = expr; :}
		;


/******************************************Func_exprs****************************************************/


Func_exprs::= Exprs:exprs {: RESULT = new ArrayList<>(); RESULT.addAll(exprs); :}
		|/*epsilon*/ {: RESULT = new ArrayList<>(); :}
		;


/******************************************Arith_op****************************************************/


Arith_op ::= PLUS {: RESULT = "PLUS"; :}
            |MINUS {:RESULT = "MINUS"; :}
            |TIMES {:RESULT = "TIMES"; :}
            |DIV {:RESULT = "DIV"; :};


/******************************************Bool_expr****************************************************/


Bool_expr ::= TRUE {: RESULT = new TrueExpression(); :}
			|FALSE {: RESULT = new FalseExpression(); :}
			|Bool_expr:b1 Bool_op:bo Bool_expr:b2 {: RESULT = new RelationalExpression(b1, b2, bo); :}
			|Expr:n1 Bool_op:bo Expr:n2 {:RESULT = new RelationalExpression(n1, n2, bo);:}
			|Bool_expr:e1 Bool_op:bo Expr:e2 {:RESULT = new RelationalExpression(e1, e2, bo);:}
			|Expr:e1 Bool_op:bo Bool_expr:e2 {:RESULT = new RelationalExpression(e1, e2, bo);:}
			|NOT Bool_expr:expr {: RESULT = new NotExpression(expr); :}
			|Expr:r1 Rel_op:ro Expr:r2 {: RESULT = new RelationalExpression(r1, r2, ro);:}
			|LPAR Bool_expr:be RPAR {: RESULT = be; :}	/*Modifica Grammatica */
			;


/******************************************Bool_op****************************************************/


Bool_op ::=  AND {: RESULT = "AND"; :}
            |OR {: RESULT = "OR"; :}
            ;


/******************************************Rel_op****************************************************/


Rel_op ::=  GT  {: RESULT = "GT"; :}
           |GE  {: RESULT = "GE"; :}
           |LT  {: RESULT = "LT"; :}
           |LE  {: RESULT = "LE"; :}
           |EQ {: RESULT = "EQ"; :};
